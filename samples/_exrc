if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
imap <C-R>	 <Plug>snipMateShow
inoremap <silent> <Plug>snipMateShow =snipMate#ShowAvailableSnips()
inoremap <silent> <Plug>snipMateBack =snipMate#BackwardsSnippet()
inoremap <silent> <Plug>snipMateTrigger =snipMate#TriggerSnippet(1)
inoremap <silent> <Plug>snipMateNextOrTrigger =snipMate#TriggerSnippet()
inoremap <C-CR> </
inoremap <silent> <S-Tab> :tabnext
cnoremap <expr> <C-H> has("gui_running") ? "\\:promptrepl\" : "\"
inoremap <expr> <C-H> has("gui_running") ? "\\:promptrepl\" : "\"
cnoremap <expr> <C-F> has("gui_running") ? "\\:promptfind\" : "\\/"
inoremap <expr> <C-F> has("gui_running") ? "\\:promptfind\" : "\\/"
cnoremap <C-F4> c
inoremap <C-F4> c
cnoremap <C-Tab> w
inoremap <C-Tab> w
cnoremap <C-A> gggHG
inoremap <C-A> gggHG
cnoremap <M-Space> :simalt ~
imap <M-Space> <Plug>snipMateNextOrTrigger
inoremap <C-Y> 
inoremap <C-Z> u
inoremap <C-S> :updategi
cmap <S-Insert> +
cmap <C-V> +
inoremap <C-U> u
imap <S-Insert> 
xnoremap  ggVG
snoremap  gggHG
onoremap  gggHG
nnoremap  gggHG
vnoremap  "+y
noremap <expr>  has("gui_running") ? ":promptfind\" : "/"
nnoremap <expr>  has("gui_running") ? ":promptrepl\" : "\"
noremap <silent> 	p :tabp
noremap <silent> 	n :tabn
noremap <silent> 	e :tabclose
noremap <silent> 	m :tabnew
noremap  
vnoremap  :update
nnoremap  :update
onoremap  :update
nmap  "+gP
omap  "+gP
vnoremap  "+x
noremap  
noremap  u
nnoremap   za
omap <silent> % <Plug>(MatchitOperationForward)
xmap <silent> % <Plug>(MatchitVisualForward)
nmap <silent> % <Plug>(MatchitNormalForward)
nnoremap <silent> '[ :call signature#mark#Goto("prev", "line", "alpha")
nnoremap <silent> '] :call signature#mark#Goto("next", "line", "alpha")
nmap ,tc <Plug>Colorizer
vnoremap <silent> , :WhichKeyVisual ','
nnoremap <silent> , :WhichKey ','
noremap <silent> ,he :HEntities 1
noremap <silent> ,hu :HEntities 0
nmap ,fp :let @*=substitute(expand("%:p"), "/", "\\", "g")
nmap ,fn :let @*=substitute(expand("%"), "/", "\\", "g")
nnoremap ,ce :!start explorer %:p:h:8
nnoremap ,cc :!start cmd /k cd %:p:h:8
nnoremap ,cd :cd %:p:h:pwd
nnoremap ,v :browse tabe E:\Anthony_GitHub\learn-vim
nnoremap ,p V`]
nmap <silent> ,sv :so $MYVIMRC
nmap <silent> ,tv :tabe $MYVIMRC
nnoremap ,mt :match errorMsg /[^\t]\zs\t\+/
nmap <silent> ,  :call ToggleHLSearch()
nmap <silent> ,/ :nohlsearch
vmap <silent> // y/=escape(@", '\\/.*$^~[]')
vnoremap < <gv
vnoremap > >gv
cnoremap Â  :simalt ~
imap Â  <Plug>snipMateNextOrTrigger
nmap Q gq
xmap Q gq
omap Q gq
nnoremap <silent> [= :call signature#marker#Goto("prev", "any",  v:count)
nnoremap <silent> [- :call signature#marker#Goto("prev", "same", v:count)
nnoremap <silent> [` :call signature#mark#Goto("prev", "spot", "pos")
nnoremap <silent> [' :call signature#mark#Goto("prev", "line", "pos")
omap <silent> [% <Plug>(MatchitOperationMultiBackward)
xmap <silent> [% <Plug>(MatchitVisualMultiBackward)
nmap <silent> [% <Plug>(MatchitNormalMultiBackward)
nnoremap <silent> ]= :call signature#marker#Goto("next", "any",  v:count)
nnoremap <silent> ]- :call signature#marker#Goto("next", "same", v:count)
nnoremap <silent> ]` :call signature#mark#Goto("next", "spot", "pos")
nnoremap <silent> ]' :call signature#mark#Goto("next", "line", "pos")
omap <silent> ]% <Plug>(MatchitOperationMultiForward)
xmap <silent> ]% <Plug>(MatchitVisualMultiForward)
nmap <silent> ]% <Plug>(MatchitNormalMultiForward)
nnoremap <silent> `[ :call signature#mark#Goto("prev", "spot", "alpha")
nnoremap <silent> `] :call signature#mark#Goto("next", "spot", "alpha")
xmap a% <Plug>(MatchitVisualTextObject)
nnoremap <silent> dm :call signature#utils#Remove(v:count)
omap <silent> g% <Plug>(MatchitOperationBackward)
xmap <silent> g% <Plug>(MatchitVisualBackward)
nmap <silent> g% <Plug>(MatchitNormalBackward)
xnoremap gx <ScriptCmd>vim9.Open(getregion(getpos('v'), getpos('.'), { type: mode() })->join())
nnoremap gx <ScriptCmd>vim9.Open(GetWordUnderCursor())
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap <silent> m? :call signature#marker#List(v:count, 0)
nnoremap <silent> m/ :call signature#mark#List(0, 0)
nnoremap <silent> m<BS> :call signature#marker#Purge()
nnoremap <silent> m  :call signature#mark#Purge("all")
nnoremap <silent> m- :call signature#mark#Purge("line")
nnoremap <silent> m. :call signature#mark#ToggleAtLine()
nnoremap <silent> m, :call signature#mark#Toggle("next")
nnoremap <silent> m :call signature#utils#Input()
nnoremap x "_x
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))gv""Pgvl
snoremap <silent> <Plug>snipMateBack a=snipMate#BackwardsSnippet()
snoremap <silent> <Plug>snipMateNextOrTrigger a=snipMate#TriggerSnippet()
nnoremap <silent> <Plug>Colorizer :ColorToggle
xmap <silent> <Plug>(MatchitVisualTextObject) <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
onoremap <silent> <Plug>(MatchitOperationMultiForward) :call matchit#MultiMatch("W",  "o")
onoremap <silent> <Plug>(MatchitOperationMultiBackward) :call matchit#MultiMatch("bW", "o")
xnoremap <silent> <Plug>(MatchitVisualMultiForward) :call matchit#MultiMatch("W",  "n")m'gv``
xnoremap <silent> <Plug>(MatchitVisualMultiBackward) :call matchit#MultiMatch("bW", "n")m'gv``
nnoremap <silent> <Plug>(MatchitNormalMultiForward) :call matchit#MultiMatch("W",  "n")
nnoremap <silent> <Plug>(MatchitNormalMultiBackward) :call matchit#MultiMatch("bW", "n")
onoremap <silent> <Plug>(MatchitOperationBackward) :call matchit#Match_wrapper('',0,'o')
onoremap <silent> <Plug>(MatchitOperationForward) :call matchit#Match_wrapper('',1,'o')
xnoremap <silent> <Plug>(MatchitVisualBackward) :call matchit#Match_wrapper('',0,'v')m'gv``
xnoremap <silent> <Plug>(MatchitVisualForward) :call matchit#Match_wrapper('',1,'v'):if col("''") != col("$") | exe ":normal! m'" | endifgv``
nnoremap <silent> <Plug>(MatchitNormalBackward) :call matchit#Match_wrapper('',0,'n')
nnoremap <silent> <Plug>(MatchitNormalForward) :call matchit#Match_wrapper('',1,'n')
map <F3> :Vex
xmap <M-Space> <Plug>snipMateVisual
smap <M-Space> <Plug>snipMateNextOrTrigger
map <silent> <F9> :HEntities 1
tnoremap <S-Del> 
tmap <S-Insert> "+
nnoremap <silent> <F8> :let notabs=!notabs|:if notabs|:tabo|:else|:tab ball|:tabn|:endif
nmap <silent> <F7> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"
nmap <silent> <F6> :call ToggleCursor()
noremap <silent> <F1> :execute "tab h " . expand("<cword>")
noremap <silent> <S-Tab> :tabnext
nnoremap <C-Del> :tabclose
nnoremap <C-Insert> :tabnew
nnoremap <C-F3> :if &go=~#'r'|set go-=r|else|set go+=r|endif
nnoremap <C-F2> :if &go=~#'T'|set go-=T|else|set go+=T|endif
nnoremap <C-F1> :if &go=~#'m'|set go-=m|else|set go+=m|endif
nnoremap <F10> :call JoinSpaceless()
map <S-F2> :set wrap
map <F2> :set nowrap
nnoremap <expr> <C-H> has("gui_running") ? ":promptrepl\" : "\"
noremap <expr> <C-F> has("gui_running") ? ":promptfind\" : "/"
onoremap <C-F4> c
nnoremap <C-F4> c
vnoremap <C-F4> c
onoremap <C-Tab> w
nnoremap <C-Tab> w
vnoremap <C-Tab> w
xnoremap <C-A> ggVG
snoremap <C-A> gggHG
onoremap <C-A> gggHG
nnoremap <C-A> gggHG
nnoremap <M-Space> :simalt ~
onoremap <M-Space> :simalt ~
noremap <C-Y> 
noremap <C-Z> u
vnoremap <C-S> :update
nnoremap <C-S> :update
onoremap <C-S> :update
noremap <C-Q> 
vmap <S-Insert> 
nmap <C-V> "+gP
omap <C-V> "+gP
vnoremap <C-C> "+y
vnoremap <BS> d
vnoremap <C-X> "+x
vmap <C-Del> "*d
vnoremap <S-Del> "+x
vnoremap <C-Insert> "+y
nmap <S-Insert> "+gP
omap <S-Insert> "+gP
cnoremap  gggHG
inoremap  gggHG
cnoremap <expr>  has("gui_running") ? "\\:promptfind\" : "\\/"
inoremap <expr>  has("gui_running") ? "\\:promptfind\" : "\\/"
cnoremap <expr>  has("gui_running") ? "\\:promptrepl\" : "\"
inoremap <expr>  has("gui_running") ? "\\:promptrepl\" : "\"
imap 	 <Plug>snipMateShow
inoremap  :updategi
inoremap  u
cmap  +
inoremap  
inoremap  u
xmap Â  <Plug>snipMateVisual
smap Â  <Plug>snipMateNextOrTrigger
nnoremap Â  :simalt ~
onoremap Â  :simalt ~
iabbr icode <code class="inset"></code>F<i
iabbr pcode <p style="text-indent:2em"><code class="inset"></code></p>2F<i
abbr #e **********************/
abbr #b /**********************
let &cpo=s:cpo_save
unlet s:cpo_save
set autoindent
set autoread
set background=dark
set backup
set backupdir=C:\\Temp
set backupskip=C:Temp
set clipboard=unnamed
set confirm
set copyindent
set dictionary=D:\\cygwin64\\usr\\share\\dict\\linux.words
set display=truncate
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set grepprg=grep\ -rnIH\ --exclude-dir=.git
set guifont=Consolas:h11,Courier_New:h11:cANSI
set guioptions=egL
set helplang=en
set history=1000
set hlsearch
set ignorecase
set incsearch
set infercase
set keymodel=startsel,stopsel
set langmenu=en_US
set langnoremap
set nolangremap
set laststatus=2
set listchars=tab:|.,trail:,nbsp:.,extends:Â¬
set modelines=4
set nrformats=bin,hex
set pastetoggle=<F5>
set report=0
set ruler
set runtimepath=~/vimfiles,~\\vimfiles\\pack\\minpac\\start\\webapi-vim,~\\vimfiles\\pack\\minpac\\start\\vim-which-key,~\\vimfiles\\pack\\minpac\\start\\vim-snipmate,~\\vimfiles\\pack\\minpac\\start\\vim-signature,~\\vimfiles\\pack\\minpac\\start\\vim-addon-mw-utils,~\\vimfiles\\pack\\minpac\\start\\tlib_vim,~\\vimfiles\\pack\\minpac\\start\\HTML-Editor,~\\vimfiles\\pack\\minpac\\start\\fencview,~\\vimfiles\\pack\\minpac\\start\\colorizer,~\\vimfiles\\pack\\minpac\\opt\\minpac,C:\\Program\ Files\\Vim/vimfiles,C:\\Program\ Files\\Vim\\vim91,C:\\Program\ Files\\Vim\\vim91\\pack\\dist\\opt\\netrw,C:\\Program\ Files\\Vim\\vim91\\pack\\dist\\opt\\matchit,~\\vimfiles\\pack\\minpac\\start\\vim-snipmate\\after,~\\vimfiles\\pack\\minpac\\start\\vim-signature\\after,~/vimfiles/after,C:\\Program\ Files\\Vim/vimfiles/after
set scrolloff=5
set selection=exclusive
set selectmode=mouse,key
set shellxquote=\"
set shortmess=filnxtToO
set showmatch
set smartcase
set smarttab
set statusline=%2*%n%m%r%h%w%*\ %F\ %1*[FORMAT=%2*%{&ff}:%{&fenc!=''?&fenc:&enc}%1*]\ [TYPE=%2*%Y%1*]\ [COL=%2*%03v%1*]\ [ROW=%2*%03l%1*/%3*%L(%p%%)%1*]
set noswapfile
set termencoding=utf-8
set thesaurus=~\\vimfiles\\thesaurus\\english.txt
set timeoutlen=500
set ttimeout
set ttimeoutlen=100
set undodir=C:\\Temp
set undofile
set viminfo=<100,'100,/50,:100,h,r$TEMP:,s10
set visualbell
set whichwrap=b,s,<,>,[,]
set wildignore=*.dll,*.exe,*.gif,*.jpg,*.mm
set wildmode=list:longest,full
" vim: set ft=vim :
